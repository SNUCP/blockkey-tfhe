#ifndef LweKEY_H
#define LweKEY_H

///@file
///@brief This file contains the declaration of LWE key structures

#include "tfhe_core.h"


struct LweKey {
   const LweParams* params;
   int32_t* key;

#ifdef __cplusplus   
   LweKey(const LweParams* params);
   ~LweKey();
   LweKey(const LweKey&) = delete; //forbidden 
   LweKey* operator=(const LweKey&) = delete; //forbidden
#endif
};

//-----------------------------------------------------------------
// autogenerated allocators/constructors/destructors declarations
// use code_autogen.pl LweKey LweParams to regenerate
//-----------------------------------------------------------------


/** allocate space for a single LweKey */
EXPORT LweKey* alloc_LweKey();
/** allocate space for an array of LweKey 
 * @param nbelts the number of elements */
EXPORT LweKey* alloc_LweKey_array(int32_t nbelts);

/** free memory space for a single LweKey 
 * @param ptr the pointer to release */
EXPORT void free_LweKey(LweKey* ptr);
/** free memory space for an array of LweKey 
 * @param nbelts the number of elements 
 * @param ptr the pointer to release */
EXPORT void free_LweKey_array(int32_t nbelts, LweKey* ptr);

/** initializes (constructor) a single LweKey on an already allocated space 
 * @param ptr the pointer to the first element
 * @param params the LWE parameters to use
 */
EXPORT void init_LweKey(LweKey* ptr, const LweParams* params);

/** initializes (constructor) an array of LweKeys on an already allocated space 
 * @param nbelts the number of elements to initialize 
 * @param ptr the pointer to the first element
 * @param params the LWE parameters to use
 */
EXPORT void init_LweKey_array(int32_t nbelts, LweKey* ptr, const LweParams* params);

/** finalizes (destructor) a single LweKey (before freeing the memory space) 
 * @param ptr the pointer to the first element
 */
EXPORT void destroy_LweKey(LweKey* ptr);

/** finalizes (destructor) an array of LweKeys (before freeing the memory space) 
 * @param nbelts the number of elements to initialize 
 * @param ptr the pointer to the first element
 */
EXPORT void destroy_LweKey_array(int32_t nbelts, LweKey* ptr);
 
/** allocates and initializes (constructor) a single LweKey 
 * @param params the LWE parameters to use
 */
EXPORT LweKey* new_LweKey(const LweParams* params);
/** allocates and initializes (constructor) a single LweKey 
 * @param nbelts the number of consecutive elements to create 
 * @param params the LWE parameters to use
 */
EXPORT LweKey* new_LweKey_array(int32_t nbelts, const LweParams* params);

/** destroy and frees memory space for a single LweKey 
 * @param ptr the pointer to release */
EXPORT void delete_LweKey(LweKey* obj);
/** destroys and free memory space for an array of LweKey 
 * @param nbelts the number of elements 
 * @param ptr the pointer to release */
EXPORT void delete_LweKey_array(int32_t nbelts, LweKey* obj);

#endif //LweKEY_H
